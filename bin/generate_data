#!/usr/bin/env ruby

require "bundler/setup"
require "pumi"
require "csv"

source = ENV["SOURCE"] || "village_pt_join.csv"
headers = ENV["HEADERS"] != "0"

output_file_provinces = ENV["OUTPUT_FILE_PROVINCES"] || Pumi::DataSet.data_path(Pumi::DataSet::PROVINCES_FILE_NAME)
output_file_districts = ENV["OUTPUT_FILE_DISTRICTS"] || Pumi::DataSet.data_path(Pumi::DataSet::DISTRICTS_FILE_NAME)
output_file_communes = ENV["OUTPUT_FILE_COMMUNES"] || Pumi::DataSet.data_path(Pumi::DataSet::COMMUNES_FILE_NAME)
output_file_villages = ENV["OUTPUT_FILE_VILLAGES"] || Pumi::DataSet.data_path(Pumi::DataSet::VILLAGES_FILE_NAME)


column_index_province_id = ENV["COLUMN_INDEX_PROVINCE_ID"] || 16
column_index_province_name_km = ENV["COLUMN_INDEX_PROVINCE_NAME_KM"] || 10
column_index_province_name_en = ENV["COLUMN_INDEX_PROVINCE_NAME_EN"] || 11

column_index_district_id = ENV["COLUMN_INDEX_DISTRICT_ID"] || 17
column_index_district_name_km = ENV["COLUMN_INDEX_DISTRICT_NAME_KM"] || 12
column_index_district_name_en = ENV["COLUMN_INDEX_DISTRICT_NAME_EN"] || 13

column_index_commune_id = ENV["COLUMN_INDEX_COMMUNE_ID"] || 18
column_index_commune_name_km = ENV["COLUMN_INDEX_COMMUNE_NAME_KM"] || 14
column_index_commune_name_en = ENV["COLUMN_INDEX_COMMUNE_NAME_EN"] || 15

column_index_village_id = ENV["COLUMN_INDEX_VILLAGE_ID"] || 1
column_index_village_name_km = ENV["COLUMN_INDEX_VILLAGE_NAME_KM"] || 2
column_index_village_name_en = ENV["COLUMN_INDEX_VILLAGE_NAME_EN"] || 3

provinces = {}
districts = {}
communes = {}
villages = {}

row_counter = 1

CSV.foreach(source, :headers => headers) do |row|
  row_counter += 1

  province_id = row[column_index_province_id].to_s
  if !province_id.empty?
    provinces[province_id] ||= {}
    provinces[province_id]["name_en"] = row[column_index_province_name_en]
    provinces[province_id]["name_km"] = row[column_index_province_name_km]
  end

  district_id = row[column_index_district_id].to_s
  if !district_id.empty?
    raise("District id invalid! Row #{row_counter}") if district_id[0..1] != province_id
    districts[district_id] ||= {}
    districts[district_id]["name_en"] = row[column_index_district_name_en]
    districts[district_id]["name_km"] = row[column_index_district_name_km]
  end

  commune_id = row[column_index_commune_id].to_s
  if !commune_id.empty?
    raise("Commune id invalid! Row #{row_counter}") if commune_id[0..3] != district_id
    communes[commune_id] ||= {}
    communes[commune_id]["name_en"] = row[column_index_commune_name_en]
    communes[commune_id]["name_km"] = row[column_index_commune_name_km]
  end

  original_village_id = row[column_index_village_id].to_s
  if !original_village_id.empty? && !commune_id.empty?
    village_id = commune_id + original_village_id[-2..-1]
    raise("Village id invalid! Row #{row_counter}. Commune id: #{commune_id}, Village id: #{village_id}") if village_id[0..5] != commune_id
    raise("Duplicate village id! Row #{row_counter}") if villages[village_id]
    villages[village_id] = {}
    villages[village_id]["name_en"] = row[column_index_village_name_en]
    villages[village_id]["name_km"] = row[column_index_village_name_km]
  end
end

File.open(output_file_provinces, 'w') { |f| f.write({"provinces" => provinces}.to_yaml) }
File.open(output_file_districts, 'w') { |f| f.write({"districts" => districts}.to_yaml) }
File.open(output_file_communes, 'w') { |f| f.write({"communes" => communes}.to_yaml) }
File.open(output_file_villages, 'w') { |f| f.write({"villages" => villages}.to_yaml) }
